import{l as i,c as a,b as t,a4 as n}from"./chunks/framework.gRbM0Ghu.js";const c=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"components/index.md","filePath":"components/index.md"}'),e={name:"components/index.md"};function l(p,s,h,r,k,o){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>框架提供一系列的组件方便快速开发。</p><h2 id="基础组件" tabindex="-1">基础组件 <a class="header-anchor" href="#基础组件" aria-label="Permalink to &quot;基础组件&quot;">​</a></h2><p>基础组件由 <a href="https://vant-ui.github.io/vant" target="_blank" rel="noreferrer">Vant</a> 提供。</p><div class="warning custom-block"><p class="custom-block-title">替换组件库</p><p>如果你不喜欢 Vant ，或者你想要将老项目迁移到 Fantastic-mobile 上，但老项目里使用的组件库并不是 Vant ，框架也提供了组件库替换移方案：</p><ul><li>《<a href="/guide/replace-to-varlet.html">替换为 Varlet</a>》</li><li>《<a href="/guide/replace-to-nut.html">替换为 NutUI</a>》</li></ul><p>如果你想使用的组件库不在上述方案中，可以通过参考任何一份方案，理解替换的整理思路，并自行替换，别担心会很复杂，我们已经将大部分工作做好了。</p></div><h2 id="内建组件" tabindex="-1">内建组件 <a class="header-anchor" href="#内建组件" aria-label="Permalink to &quot;内建组件&quot;">​</a></h2><p>为满足 UI 组件库可替换的特性，框架提供了一批内建组件。这些组件的设计仅满足于框架自身需求，如果在业务中使用并且无法满足业务需求，建议使用更为专业的 UI 组件库。</p><p>内建组件存放在 <code>/src/ui/components/</code> 目录下，并配置了使用时自动引入。</p><div class="tip custom-block"><p class="custom-block-title">说明</p><p>如果内建组件有提供 <code>class</code> 属性，或者类似于 <code>class</code> 的属性，例如 <code>contentClass</code> ，意味着你可以通过 UnoCSS 提供的原子类来修改组件的默认样式，并且不会产生样式冲突。</p><p>其背后的原理是因为框架通过 <code>cn()</code> 函数来管理组件的 <code>class</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ClassValue } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;clsx&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { clsx } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;clsx&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { twMerge } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;tailwind-merge&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> twMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clsx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputs))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="扩展组件" tabindex="-1">扩展组件 <a class="header-anchor" href="#扩展组件" aria-label="Permalink to &quot;扩展组件&quot;">​</a></h2><p>扩展组件也就是开发者自定义的组件，存放在 <code>/src/components/</code> 目录下，我们也建议开发者将自定义组件存放在该目录下，方便后续框架迁移升级。</p><p>框架提供了几个基于 Vant 组件上二次封装的组件。</p>`,12)])])}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
